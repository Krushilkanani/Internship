{"ast":null,"code":"var _jsxFileName = \"E:\\\\INTERNSHIP_SST\\\\REACT\\\\15-routing\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, Await } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8081/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","Await","Suspense","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","children","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["E:/INTERNSHIP_SST/REACT/15-routing/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, Await } from 'react-router-dom';\r\nimport { Suspense } from 'react';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n    const data = useLoaderData();\r\n\r\n    return (\r\n        <>\r\n            <EventsList events={events} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport async function loader() {\r\n    const response = await fetch('http://localhost:8081/events');\r\n\r\n    if (!response.ok) {\r\n        // return { isError: true, message: 'Could not fetch events.' };\r\n        throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), { status: 500 });\r\n    } else {\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AACvD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAE5B,oBACIK,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACIN,OAAA,CAACF,UAAU;MAACS,MAAM,EAAEA;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAChC,CAAC;AAEX;AAACP,EAAA,CARQD,UAAU;EAAA,QACFR,aAAa;AAAA;AAAAiB,EAAA,GADrBT,UAAU;AAUnB,OAAO,eAAeU,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/F,CAAC,MAAM;IACH,OAAOP,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAU,YAAA,CAAAV,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}